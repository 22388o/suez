#!/usr/bin/env python3
from datetime import datetime
import json
import math
import subprocess

import click
from rich import box
from rich.console import Console
from rich.table import Table


class LnClient:
    def _run(self, *args):
        j = subprocess.run(("lncli",) + args, capture_output=True)
        return json.loads(j.stdout)

    def getinfo(self):
        return self._run("getinfo")

    def listchannels(self):
        return self._run("listchannels")["channels"]

    def getnodeinfo(self, node):
        return self._run("getnodeinfo", node)["node"]

    def getchaninfo(self, node):
        return self._run("getchaninfo", node)

    def fwdinghistory(self, since):
        return self._run(
            "fwdinghistory", "--max_events", "50000", "--start_time", since
        )

    def updatechanpolicy(self, point, base_fee, fee_rate, time_lock_delta):
        return self._run(
            "updatechanpolicy",
            "--base_fee_msat",
            str(base_fee),
            "--fee_rate",
            "%0.8f" % fee_rate,
            "--time_lock_delta",
            str(time_lock_delta),
            "--chan_point",
            point,
        )


def _sort_channels(x):
    local = int(x["local_balance"])
    remote = int(x["remote_balance"])
    return local / (local + remote)


def _since(ts):
    d = datetime.utcnow() - datetime.utcfromtimestamp(ts)
    return "%0.1f" % (d.total_seconds() / 86400)


@click.command()
@click.option("--base_fee", default=0, help="Set base fee")
@click.option("--fee_rate", default=0, help="Set fee rate")
@click.option("--time_lock_delta", default=144, help="Set time lock delta")
@click.option("--fee_sigma", default=24, help="Fee sigma")
def suez(base_fee, fee_rate, time_lock_delta, fee_sigma):
    ln = LnClient()
    chan_updates = {}

    identity = ln.getinfo()["identity_pubkey"]

    table = Table(box=box.SIMPLE)
    table.add_column("\ninbound", justify="right", style="bright_red")
    table.add_column("\nratio", justify="center")
    table.add_column("\noutbound", justify="right", style="green")
    table.add_column("local\nbase_fee\n(msat)", justify="right", style="bright_blue")
    table.add_column("local\nfee_rate\n(ppm)", justify="right", style="bright_blue")
    table.add_column("remote\nbase_fee\n(msat)", justify="right", style="bright_yellow")
    table.add_column("remote\nfee_rate\n(ppm)", justify="right", style="bright_yellow")
    table.add_column("uptime\n\n(%)", justify="right", style="bright_black")
    table.add_column("last\nforward\n(days)", justify="right")
    table.add_column("\nalias")

    total_inbound, total_outbound = 0, 0

    for fe in ln.fwdinghistory("-28d")["forwarding_events"]:
        c1 = fe["chan_id_in"]
        c2 = fe["chan_id_out"]
        ts = int(fe["timestamp"])
        chan_updates[c1] = max(ts, chan_updates.get(c1, 0))
        chan_updates[c2] = max(ts, chan_updates.get(c2, 0))

    for c in sorted(ln.listchannels(), key=_sort_channels):
        active, pubkey, point = c["active"], c["remote_pubkey"], c["channel_point"]
        capacity, outbound, inbound = (
            int(c["capacity"]),
            int(c["local_balance"]),
            int(c["remote_balance"]),
        )
        send = int(20 * outbound / (outbound + inbound))
        recv = 20 - send
        bar = (
            "[bright_red]"
            + ("·" * recv)
            + "[/bright_red]"
            + "|"
            + "[green]"
            + ("·" * send)
            + "[/green]"
        )

        uptime = int(100 * int(c["uptime"]) / int(c["lifetime"]))

        # set fee
        if base_fee > 0 and fee_rate > 0:
            ratio = outbound / (outbound + inbound) - 0.5
            coef = math.exp(-fee_sigma * ratio * ratio)
            _fee_rate = 0.000001 * coef * fee_rate
            if _fee_rate < 0.000001:
                _fee_rate = 0.000001
            ln.updatechanpolicy(point, base_fee, _fee_rate, time_lock_delta)

        # fees
        chan = ln.getchaninfo(c["chan_id"])
        node1_fee = (
            chan["node1_policy"]["fee_base_msat"],
            chan["node1_policy"]["fee_rate_milli_msat"],
        )
        node2_fee = (
            chan["node2_policy"]["fee_base_msat"],
            chan["node2_policy"]["fee_rate_milli_msat"],
        )
        if chan["node1_pub"] != identity:
            assert chan["node2_pub"] == identity
            fee_remote = node1_fee
            fee_local = node2_fee
        if chan["node2_pub"] != identity:
            assert chan["node1_pub"] == identity
            fee_local = node1_fee
            fee_remote = node2_fee

        last_forward = chan_updates.get(c["chan_id"], 0)

        # alias
        alias = ln.getnodeinfo(pubkey)["alias"]

        total_inbound += inbound
        total_outbound += outbound
        table.add_row(
            "{:,}".format(inbound),
            bar,
            "{:,}".format(outbound),
            str(fee_local[0]),
            str(fee_local[1]),
            str(fee_remote[0]),
            str(fee_remote[1]),
            str(uptime),
            _since(last_forward) if last_forward else "never",
            alias,
        )

    table.add_row("─" * 11, None, "─" * 11)
    table.add_row("{:,}".format(total_inbound), "", "{:,}".format(total_outbound))

    console = Console()
    console.print(table)


if __name__ == "__main__":
    suez()
